# -*- coding: utf-8 -*-
"""Dataset_2_ramsha.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zVQrlpnrCprEvC94U1lbzMtw44J_oKIB
"""

import pandas as pd
import numpy as np

df = pd.read_csv("/content/chipotle.tsv",sep="\t")

df.head()

"""1. **Missing Values**:
Question: Check for missing values in each column (Order ID, Quantity, Item Name, Choice Description, Item Price). How should missing values be handled?

"""

df.isnull().sum()

"""Above we see that only choice description column contains missing values"""

df["choice_description"] = df["choice_description"].fillna("No description Available")

df.isnull().sum()

df.head()

"""2. **Data Types**:
Question: Verify the data types of each column. Do they align with their expected types, and should any adjustments be made?

"""

df.dtypes

df.info()

"""from above we observe that item_price is of object datatype and it should be of integer datatype

3. **Duplicated Entries:**
Question: Identify and handle duplicated entries in the dataset. How might duplicates impact analysis, and what is the appropriate action?
"""

df.duplicated().value_counts()

"""there are 59 duplicate rows"""

df.duplicated().sum()

duplicates=df[df.duplicated()]

duplicates

"""The appropriate action would be to drop those duplicate rows. as it does not make sense to keep duplicate rows"""

df.drop_duplicates(inplace=True)

df.shape

df.duplicated().sum()

"""4. **Quantity and Item Price**:
Question: Examine the Quantity and Item Price columns. Are there any inconsistencies or anomalies that need correction?

---



"""

print("Quantity")
print(df["quantity"].value_counts())
df["quantity"].unique()

print("Item Price")
print(df["item_price"].value_counts())
df["item_price"].unique()

"""removing the $ sign from the item_price cols makes it more appropriate

5. **Choice Description**:
Question: Analyze the Choice Description column. How should choices be handled, especially when there are multiple descriptions for a single item?
"""

df["choice_description"].unique()

df["choice_description"].value_counts()

"""There are multiple description for single item so what we can do is split the data using separator as comma and creating additional columns to store multiple descriptions.

6. **Handling Special Characters**:
Question: Check for special characters in text-based columns (e.g., Item Name, Choice Description). How can these be addressed for consistency?

special character in item_name column is - (hyphen) and in Choice description column is [ ] and comma so removing these special character from data leads to consistency
"""

df['item_name'].unique()

df["item_name"] = df["item_name"].replace("-"," ",regex=True)

df["item_name"].unique()

df["choice_description"].unique()

df["choice_description"]=df["choice_description"].str.strip("[]")

df["choice_description"].unique()

df["choice_description"]=df["choice_description"].str.replace("[","").str.replace("]","")

df["choice_description"].unique()

df["item_price"]=df["item_price"].str.replace("$","")

df["item_price"].unique()

"""7. **Order Id Integrity**:
Question: Cross-reference the Order ID column for integrity. Are there any irregularities or patterns that need validation?

"""

df['order_id'].isnull().any()

df['order_id'].duplicated().any()

df.head()

"""8. **Item Name Standardization:**
Question: Standardize the Item Name column. Are there variations that can be unified for better analysis?

"""

df["item_name"]=df["item_name"].str.strip() #remove leading and trailing whitespaces from each string.

df["item_name"]

"""9. **Quantity and Price Relationships:**
Question: Investigate the relationships between Quantity and Item Price. Are there cases where adjustments need to be made for accurate analysis?

"""

print(df[['quantity', 'item_price']].describe())

import matplotlib.pyplot as plt
plt.scatter(df['quantity'], df['item_price'])
plt.xlabel('Quantity')
plt.ylabel('Item Price')
plt.title('Quantity vs. Item Price')
plt.show()

"""10. **Data Integrity Check:**
Question: Perform a data integrity check by ensuring that quantities and prices align with the corresponding items and descriptions.

"""

grouped_data = df.groupby(['item_name', 'choice_description']).agg({
    'quantity': 'sum',
    'item_price': lambda x: x.astype(float).mean()
}).reset_index()

grouped_data

df.to_csv("cleaned_chipotle.csv",sep=",")

"""12. **Handling Categorical Data:**
Question: For categorical columns (e.g., Item Name), consider encoding or transforming them into a format suitable for analysis.

"""

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
df['item_name_encoded'] = encoder.fit_transform(df['item_name'])

df["item_name_encoded"].unique()

"""13. **Consistent Quantity and Price Units:**
Question: Ensure consistency in units for Quantity and Item Price. Should any conversions or adjustments be made for uniform analysis?

"""

df['Quantity-Dozen'] = df['quantity'] * 12  # Convert dozens to individual items

df['Quantity-Dozen'].unique()

